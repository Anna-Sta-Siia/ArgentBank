// backend/server/scripts/seedUsers.js (—Ñ—Ä–∞–≥–º–µ–Ω—Ç)
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
const User = require('../database/models/userModel');

const uri = (process.env.DATABASE || process.env.DATABASE_URL || 'mongodb://localhost:27017/argentbank').trim();

async function upsertUser(u) {
  const hash = await bcrypt.hash(u.password, 12);

  // ‚ùóÔ∏è—Ä–∞–∑–¥–µ–ª—è–µ–º email –æ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –∏–º –≤ $set
  const { email, password, ...rest } = u;

  const doc = await User.findOneAndUpdate(
    { email },                                // –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞
    {
      $setOnInsert: { email },                // email —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
      $set: { ...rest, password: hash },      // –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
    },
    { upsert: true, new: true }
  );

  console.log(`‚úÖ ${doc.email} (role=${doc.role})`);
}

(async () => {
  try {
    // —ç—Ç–∏ –æ–ø—Ü–∏–∏ —É–±–µ—Ä—É—Ç –¥–µ–ø—Ä–µ–∫–µ–π—à–Ω-–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –¥—Ä–∞–π–≤–µ—Ä–∞
    await mongoose.connect(uri, { useNewUrlParser: true, useUnifiedTopology: true });

    await upsertUser({
      email: 'demo@argent.bank',
      password: '123456',
      firstName: 'Tony',
      lastName: 'Stark',
      userName: 'IronMan',
      role: 'demo',
    });

    await upsertUser({
      email: 'tony@stark.com',   
      password: 'password123',  
      firstName: 'Tony',
      lastName: 'Stark',
      userName: 'IronMan',
      role: 'admin',
    });

    await mongoose.disconnect();
    console.log('üéâ Seed termin√©');
    process.exit(0);
  } catch (e) {
    console.error('‚ùå Seed √©chou√© :', e.message);
    try { await mongoose.disconnect(); } catch {}
    process.exit(1);
  }
})();
